import os
from urllib.parse import urlparse
from pathlib import Path
import pandas as pd
import json
import requests


def download_image_url(url: str, filename=None):
    a = urlparse(url.rstrip())

    if filename is None:
        filename = str(os.path.basename(a.path)).strip()
    
    res = requests.get(url.rstrip())
    img_data = res.content
    print('Downloading image', filename, 'from URL:', url.rstrip())
    with open(filename, 'wb') as handler:
        handler.write(img_data)
    return filename


# Look for all annotations in squidle with the following tag name:

def get_images_with_tag(tag_name, num_page=1):
    # get annotated images
    params={"q": json.dumps({"filters":[{"name":"annotations","op":"any","val":{"name":"annotation_labels","op":"any","val":{"name":"tag_group","op":"has","val":{"name":"name","op":"eq","val":tag_name}}}}]}), 
            "single":False,
            "results_per_page": 100,
            "page": num_page}

    annotations = requests.get(url + "/api/media", params=params, headers=headers).json()
    
    return annotations

# Let's select one Media ID and get in which annotation set it is labelled
def get_annotation_sets_from_media_id(media_id, num_page=1):
    params={"q": json.dumps({"filters":[{"name":"media_id","op":"eq","val":media_id}]}), 
            "single":False,
            "results_per_page": 1000,
            "page": num_page}

    annotations = requests.get(url + "/api/media_annotation", params=params, headers=headers).json()
    
    annotation_set_ids = []
    for o in annotations["objects"]:
        annotation_set_ids.append(o['annotation_set_id'])
        
    annotation_set_ids = set(annotation_set_ids)
    annotation_set_ids = list(annotation_set_ids)
    return annotation_set_ids

def get_annotations(annotation_set_id, media_id, num_page=1):
    params={"q": json.dumps({"filters":[{"name":"media_annotation","op":"has","val":{"name":"media_id","op":"eq","val":media_id}}]}), 
            "single":False,
            "results_per_page": 1000,
            "page": num_page}

    res = requests.get(url + "/api/annotation_set/" + str(annotation_set_id) + "/annotations", params=params, headers=headers)
    if "Unauthorised" in res.text:
        return None
    else:
        annotations = res.json()
        return annotations

def get_media_info(media_id):
    params={}
    media = requests.get(url + "/api/media/"+str(media_id), params=params, headers=headers).json()
    return media


url = "https://soi.squidle.org"
api_token='6b71fa1b64127e4edef92a4fe819246786097c2bd0571e8782889736'

#url = "https://squidle.org"
#api_token='ba5506cbd4dd2afa861aacf0fbe18321ef82041a9d14ee8bce933d50'

headers = {
    'content-type': 'application/json',
    'Accept': "application/json",
    'X-auth-token': api_token
}

# get user_id
params={"q": json.dumps({"filters":[{"name":"api_token","op":"eq","val":api_token}],"single":True})}
user = requests.get(url + "/api/users", params=params).json()
print("Welcome,", user['first_name'], "[",user['username'],"]")

tag_name = "trash"
media_with_tag_named_annotations = get_images_with_tag(tag_name)

tag_path = Path(tag_name)
tag_path.mkdir(exist_ok=True)

data = {
    'media_id': [],
    'media_url': [],
    'latitude': [],
    'longitude': [],
    'altitude': [],
    'depth': [],
}
data_labels = {
    'media_id': [],
    'label_x': [],
    'label_y': [],
}

for m in media_with_tag_named_annotations['objects']:
    media_id = m['id']
    media_url = m['path_best']
    
    media_info = get_media_info(media_id)
    latitude = media_info['pose']['lat']
    longitude = media_info['pose']['lon']
    altitude = media_info['pose']['alt']
    depth = media_info['pose']['dep']
    
    download_image_url(media_url, tag_path / (str(media_id) + '.png'))
    
    annotation_set_ids = get_annotation_sets_from_media_id(media_id)
    print("Image", media_id, "has", len(annotation_set_ids), "annotation sets")
    
    data['media_id'].append(media_id)
    data['media_url'].append(media_url)
    data['latitude'].append(latitude)
    data['longitude'].append(longitude)
    data['altitude'].append(altitude)
    data['depth'].append(depth)
    
    for annotation_set_id in annotation_set_ids:
        annotations = get_annotations(annotation_set_id, media_id)
        if annotations is not None:
            for ann in annotations['objects']:
                if 'tag_group' not in ann:
                    continue
                if ann['tag_group'] is None:
                    continue
                if 'name' not in ann['tag_group']:
                    continue
                if ann['tag_group']['name'] == tag_name:
                    print(tag_name, "found at xy=", ann['media_annotation']['x'], ann['media_annotation']['y'])
                    label_x = ann['media_annotation']['x']
                    label_y = ann['media_annotation']['y']
                    data_labels['media_id'].append(media_id)
                    data_labels['label_x'].append(label_x)
                    data_labels['label_y'].append(label_y)
    pd.DataFrame(data).to_csv(tag_path / "filelist.csv")
    pd.DataFrame(data_labels).to_csv(tag_path / "filelist_labels.csv")
